// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

const runInteractiveConsole = require("./keyboard");
const Hero = require("./game-models/Hero");
const Enemy = require("./game-models/Enemy");
const View = require("./View");
const Boomerang = require("./game-models/Boomerang");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

class Game {
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.hero = new Hero(new Boomerang(), 0); // –ì–µ—Ä–æ—é –º–æ–∂–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–º–µ—Ä–∞–Ω–≥.
    this.enemy = new Enemy();
    this.view = new View();
    this.track = [];
    this.time = 300;
    this.score = 0;
    this.speedEnemy = 0;
    this.regenerateTrack();
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = new Array(this.trackLength).fill(" ");
    this.track[this.enemy.position] = this.enemy.skin;
    this.track[this.hero.position] = this.hero.skin;
    if (this.hero.position < this.hero.boomerang.position)
      this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
  }

  check() {
    if (
      this.hero.position === this.enemy.position ||
      this.hero.position > this.enemy.position
    ) {
      this.die = true;
      this.hero.die(this.name, this.score);
    }
    if (this.hero.boomerang.position - 2 === this.enemy.position - 4)
      this.enemy.skin = "üí•";
    if (
      this.enemy.position === this.hero.boomerang.position ||
      this.hero.boomerang.position > this.enemy.position
    ) {
      this.enemy.die();
      this.dieEnemy = true;
      this.hero.boomerang.course = false;
      this.score += 1;
      this.enemy.generateSkin();
      this.enemy.position = 29;
    }
  }

  registr() {
    return new Promise((res) => {
      rl.question("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", (answer) => res(answer));
    });
  }

  async moveEnemy() {
    this.speedEnemy = setInterval(() => {
      this.enemy.moveLeft();
    }, this.time);
  }

  async play() {
    this.name = await this.registr();
    runInteractiveConsole(this.hero);
    this.moveEnemy();
    const interval = setInterval(() => {
      // Let's play!
      this.check();
      if (this.dieEnemy) {
        clearInterval(this.speedEnemy);
        if (this.time > 50) this.time -= 20;
        this.dieEnemy = false;
        this.moveEnemy();
      }
      if (this.die) clearInterval(interval);
      this.regenerateTrack();
      this.view.render(this.track, this.score, this.name, this.trackLength);
    }, 42);
  }
}
module.exports = Game;
